{
  "language": "Solidity",
  "sources": {
    "contracts/Delegation.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract Delegate {\r\n\r\n  address public owner;\r\n\r\n  constructor(address _owner) public {\r\n    owner = _owner;\r\n  }\r\n\r\n  function pwn() public {\r\n    owner = msg.sender;\r\n  }\r\n}\r\n\r\ncontract Delegation {\r\n\r\n  address public owner;\r\n  Delegate delegate;\r\n\r\n  constructor(address _delegateAddress) public {\r\n    delegate = Delegate(_delegateAddress);\r\n    owner = msg.sender;\r\n  }\r\n\r\n  fallback() external {\r\n    (bool result,) = address(delegate).delegatecall(msg.data);\r\n    if (result) {\r\n      this;\r\n    }\r\n  }\r\n}\r\n"
    },
    "contracts/Token.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\ncontract Token {\r\n\r\n  mapping(address => uint) balances;\r\n  uint public totalSupply;\r\n\r\n  constructor(uint _initialSupply) public {\r\n    balances[msg.sender] = totalSupply = _initialSupply;\r\n  }\r\n\r\n  function transfer(address _to, uint _value) public returns (bool) {\r\n    require(balances[msg.sender] - _value >= 0);\r\n    balances[msg.sender] -= _value;\r\n    balances[_to] += _value;\r\n    return true;\r\n  }\r\n\r\n  function balanceOf(address _owner) public view returns (uint balance) {\r\n    return balances[_owner];\r\n  }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}